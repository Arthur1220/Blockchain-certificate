openapi: '3.0.0'
info:
  title: 'Certificate Blockchain System API'
  version: '1.0.0'
  description: 'API para gerenciar usuários, instituições, cursos e certificados em blockchain. A autenticação é baseada em cookies httpOnly.'
servers:
  - url: '/api'
    description: 'Servidor de Desenvolvimento'

tags:
  - name: 'Authentication'
    description: 'Autenticação (Login, Logout, Refresh)'
  - name: 'Users'
    description: 'Gerenciamento de usuários'
  - name: 'Institutions'
    description: 'Gerenciamento de instituições'
  - name: 'Courses'
    description: 'Gerenciamento de cursos por instituição'
  - name: 'Certificates'
    description: 'Gerenciamento de certificados'
  - name: 'Healthcheck'
    description: 'Verificação de status da API'

components:
  schemas:
    # --- Auth & Users ---
    LoginPayload:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: 'admin@test.com' }
        password: { type: string, format: password, example: 'password123' }
    UserRegisterPayload:
      type: object
      required: [username, email, password]
      properties:
        username: { type: string, example: 'janedoe' }
        email: { type: string, format: email, example: 'jane.doe@example.com' }
        password: { type: string, format: password, example: 'password123' }
        firstName: { type: string, example: 'Jane' }
        lastName: { type: string, example: 'Doe' }
        role: { type: string, enum: [STUDENT, STAFF, ADMIN], default: STUDENT }
    UserUpdatePayload:
      type: object
      properties:
        username: { type: string }
        firstName: { type: string }
        lastName: { type: string }
    
    # --- Institutions & Addresses ---
    AddressPayload:
      type: object
      required: [street, number, postalCode, city, state]
      properties:
        street: { type: string, example: 'Rua das Flores' }
        number: { type: string, example: '123' }
        postalCode: { type: string, example: '45653-000' }
        city: { type: string, example: 'Ilhéus' }
        state: { type: string, example: 'Bahia' }
    InstitutionCreatePayload:
      type: object
      required: [name, acronym, cnpj, address]
      properties:
        name: { type: string, example: 'Universidade Estadual de Santa Cruz' }
        acronym: { type: string, example: 'UESC' }
        cnpj: { type: string, example: '00.000.000/0001-00' }
        address: { $ref: '#/components/schemas/AddressPayload' }
    InstitutionUpdatePayload:
      type: object
      properties:
        name: { type: string }
        acronym: { type: string }
        status: { type: string, enum: [ACTIVE, INACTIVE, UNDER_REVIEW] }
        address: { type: object, properties: { street: { type: string }, number: { type: string }, postalCode: { type: string }, city: { type: string }, state: { type: string } } }

    # --- Courses ---
    CourseCreatePayload:
      type: object
      required: [name, workload]
      properties:
        name: { type: string, example: 'Introdução à Blockchain' }
        description: { type: string, example: 'Curso sobre os fundamentos da tecnologia blockchain.' }
        workload: { type: number, format: float, example: 40.5 }
    CourseUpdatePayload:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
        workload: { type: number, format: float }

    # --- Certificates ---
    CertificateIssuePayload:
      type: object
      required: [ownerId, courseId, certificateCode, ipfsHash, issueDate]
      properties:
        ownerId: { type: string, description: "ID do usuário (STUDENT) que receberá o certificado.", example: "cme0bf63b0001g78jyeamfy28" }
        courseId: { type: string, description: "ID do CourseTemplate referente a este certificado.", example: "cme0c2n1b000kg7aoso3pezpv" }
        certificateCode: { type: string, description: "Código único gerado pela instituição.", example: "UESC-2025-XYZ-001" }
        ipfsHash: { type: string, description: "Hash do documento (PDF) no IPFS.", example: "QmXoW8...ZCW2" }
        issueDate: { type: string, format: "date-time", description: "Data de emissão do certificado." }
    CertificateStatusUpdatePayload:
      type: object
      required: [status]
      properties:
        status: { type: string, enum: [VALID, REVOKED, PENDING], example: "VALID" }

paths:
  /: 
    get: { tags: [Healthcheck], summary: 'Verifica se a API está no ar', responses: { '200': { description: 'API está funcionando' } } }
  
  # --- Auth Paths ---
  /auth/login:
    post:
      tags: [Authentication]
      summary: 'Realiza login e define os cookies de autenticação'
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/LoginPayload' } } } }
      responses:
        '200': { description: 'Login bem-sucedido.' }
  /auth/refresh:
    post: { tags: [Authentication], summary: 'Usa o refreshToken para obter um novo accessToken', responses: { '200': { description: 'Token de acesso renovado.' } } }
  /auth/logout:
    post: { tags: [Authentication], summary: 'Realiza logout e limpa os cookies', responses: { '200': { description: 'Logout bem-sucedido.' } } }
  
  # --- User Paths ---
  /users/register:
    post:
      tags: [Users]
      summary: 'Registra um novo usuário'
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/UserRegisterPayload' } } } }
      responses:
        '201': { description: 'Usuário criado.' }
  /users/profile/me:
    get: { tags: [Users], summary: 'Busca os dados do usuário autenticado', responses: { '200': { description: 'Dados do usuário.' } } }
  /users:
    get: { tags: [Users], summary: 'Lista todos os usuários (Somente Admin)', responses: { '200': { description: 'Lista de usuários.' } } }
  /users/{id}:
    get:
      tags: [Users]
      summary: 'Busca um usuário por ID (Somente Admin)'
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      responses:
        '200': { description: 'Dados do usuário.' }
    patch:
      tags: [Users]
      summary: 'Atualiza um usuário (Admin ou o próprio usuário)'
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/UserUpdatePayload' } } } }
      responses:
        '200': { description: 'Usuário atualizado.' }
    delete:
      tags: [Users]
      summary: 'Deleta um usuário por ID (Somente Admin)'
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      responses:
        '204': { description: 'Usuário deletado.' }

  # --- Institution Paths ---
  /institutions:
    post:
      tags: [Institutions]
      summary: 'Cria uma nova instituição (Somente Admin)'
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/InstitutionCreatePayload' } } } }
      responses:
        '201': { description: 'Instituição criada.' }
    get: { tags: [Institutions], summary: 'Lista todas as instituições (Somente Admin)', responses: { '200': { description: 'Lista de instituições.' } } }
  /institutions/{id}:
    get:
      tags: [Institutions]
      summary: 'Busca uma instituição por ID (Admin ou Staff da instituição)'
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      responses:
        '200': { description: 'Dados da instituição.' }
    patch:
      tags: [Institutions]
      summary: 'Atualiza uma instituição por ID (Admin ou Staff da instituição)'
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/InstitutionUpdatePayload' } } } }
      responses:
        '200': { description: 'Instituição atualizada.' }
    delete:
      tags: [Institutions]
      summary: 'Deleta uma instituição por ID (Somente Admin)'
      parameters: [ { name: id, in: path, required: true, schema: { type: string } } ]
      responses:
        '204': { description: 'Instituição deletada.' }
  
  # --- Course Paths ---
  /institutions/{institutionId}/courses:
    post:
      tags: [Courses]
      summary: 'Cria um novo curso para uma instituição (Admin ou Staff)'
      parameters: [ { name: institutionId, in: path, required: true, schema: { type: string } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: '#/components/schemas/CourseCreatePayload' } } } }
      responses:
        '201': { description: 'Curso criado.' }
    get: { tags: [Courses], summary: 'Lista os cursos de uma instituição', parameters: [ { name: institutionId, in: path, required: true, schema: { type: string } } ], responses: { '200': { description: 'Lista de cursos.' } } }
  /institutions/{institutionId}/courses/{courseId}:
    patch:
      tags: [Courses]
      summary: 'Atualiza um curso (Admin ou Staff da instituição)'
      parameters:
        - { name: institutionId, in: path, required: true, schema: { type: string } }
        - { name: courseId, in: path, required: true, schema: { type: string } }
      requestBody: { content: { application/json: { schema: { $ref: '#/components/schemas/CourseUpdatePayload' } } } }
      responses:
        '200': { description: 'Curso atualizado.' }
    delete:
      tags: [Courses]
      summary: 'Deleta um curso (Admin ou Staff da instituição)'
      parameters:
        - { name: institutionId, in: path, required: true, schema: { type: string } }
        - { name: courseId, in: path, required: true, schema: { type: string } }
      responses:
        '204': { description: 'Curso deletado.' }

  # --- Certificate Paths ---
  /certificates:
    post:
      tags: [Certificates]
      summary: 'Emite um novo certificado (Admin ou Staff)'
      description: 'Um Staff só pode emitir certificados para cursos de sua própria instituição e para alunos vinculados a ela.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateIssuePayload'
      responses:
        '201': { description: 'Certificado emitido com sucesso.' }
        '403': { description: 'Permissão negada.' }
        '404': { description: 'Curso ou aluno não encontrado.' }
    get:
      tags: [Certificates]
      summary: 'Lista certificados com base no perfil do usuário'
      description: 'STUDENTs veem apenas seus próprios certificados. STAFFs veem os certificados de sua instituição. ADMINs veem todos.'
      responses:
        '200': { description: 'Lista de certificados.' }

  /certificates/{id}/status:
    patch:
      tags: [Certificates]
      summary: 'Atualiza o status de um certificado (Admin ou Staff)'
      description: 'Permite alterar o status de um certificado (ex: PENDING para VALID, ou VALID para REVOKED).'
      parameters:
        - { name: id, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateStatusUpdatePayload'
      responses:
        '200': { description: 'Status do certificado atualizado.' }
        '403': { description: 'Permissão negada.' }