generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// Enums
// =================================

enum InstitutionRole {
  STUDENT
  STAFF
  ADMIN
}

enum InstitutionStatus {
  ACTIVE
  INACTIVE
  UNDER_REVIEW
}

enum CertificateStatus {
  VALID
  REVOKED
  PENDING
}

enum BlockchainStatus {
  SUCCESS
  FAILED
}

// =================================
// Models
// =================================

model User {
  id                  String   @id @default(cuid())
  username            String   @unique
  email               String   @unique
  password            String
  firstName           String?
  lastName            String?
  isActive            Boolean  @default(true)
  phone               String?
  cpf                 String?  @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  role                InstitutionRole @default(STUDENT)

  memberships         InstitutionMembership[]
  certificatesIssued  Certificate[]           @relation("Issuer")
  certificatesOwned   Certificate[]           @relation("Owner")
  revocationsMade     Revocation[]
  blockchainRecords   BlockchainRecord[]
}

model InstitutionMembership {
  role          InstitutionRole
  assignedAt    DateTime        @default(now())

  user          User            @relation(fields: [userId], references: [id])
  userId        String
  institution   Institution     @relation(fields: [institutionId], references: [id])
  institutionId String

  @@id([userId, institutionId])
  @@index([institutionId])
}

model Address {
  id          String      @id @default(cuid())
  street      String
  number      String
  postalCode  String
  city        String
  state       String

  institution Institution?
}

model Institution {
  id            String             @id @default(cuid())
  name          String             @unique
  acronym       String
  cnpj          String             @unique
  logo          String?
  officialSite  String?
  phone         String?
  email         String?
  status        InstitutionStatus  @default(UNDER_REVIEW)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  address       Address            @relation(fields: [addressId], references: [id])
  addressId     String             @unique

  members       InstitutionMembership[]
  courses       CourseTemplate[]
}

model CourseTemplate {
  id            String      @id @default(cuid())
  name          String
  description   String?
  workload      Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String

  certificates  Certificate[]

  @@unique([name, institutionId])
  @@index([institutionId])
}

model Certificate {
  id               String            @id @default(cuid())
  certificateCode  String            @unique
  ipfsHash         String            @unique
  blockchainHash   String?           @unique
  issueDate        DateTime
  expiryDate       DateTime?
  status           CertificateStatus @default(PENDING)
  createdAt        DateTime          @default(now())

  course           CourseTemplate    @relation(fields: [courseId], references: [id])
  courseId         String

  owner            User              @relation("Owner", fields: [ownerId], references: [id])
  ownerId          String

  issuer           User?             @relation("Issuer", fields: [issuerId], references: [id])
  issuerId         String?

  revocation       Revocation?
  blockchainRecord BlockchainRecord?

  @@index([status])
  @@index([ownerId])
  @@index([courseId])
}

model Revocation {
  id            String    @id @default(cuid())
  reason        String
  createdAt     DateTime  @default(now())

  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String      @unique

  revoker       User        @relation(fields: [revokerId], references: [id])
  revokerId     String
}

// Tabela BlockchainRecord com os novos campos de custo
model BlockchainRecord {
  id                     String           @id @default(cuid())
  transactionHash        String           @unique
  status                 BlockchainStatus @default(SUCCESS)
  registrationDate       DateTime         @default(now())
  
  // Detalhes de custo da transação
  cryptoAsset            String           // Ex: "ETH", "MATIC"
  transactionFeeInCrypto Decimal          // Custo total em cripto (ex: 0.005)
  cryptoPriceInBRL       Decimal          // Cotação no momento (ex: 1 ETH = 15000.00 BRL)
  transactionFeeInBRL    Decimal          // Custo final calculado em BRL

  // Relacionamentos
  certificate     Certificate       @relation(fields: [certificateId], references: [id])
  certificateId   String            @unique

  user            User              @relation(fields: [userId], references: [id])
  userId          String
}